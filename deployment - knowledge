Whenever we go for a deployment process, we shutdown the server, remove all active connections, drain out the older version and move the
updated version of the application and restart the server.

1.shutting down your tomcat server
2.cleaning any deployment directories i.e removing old artifacts
3.defining a rollback point
4.deploying the new version of your app
5.restarting the server

During a deployment process, your service is responsive the whole time, means that no requests are dropped at any point during the
deployment process i.e Zero Down-Time or less down-time with 15min or Minimize the downtime as much as possible.
Q.What Is Blue-Green Deployment?
A.1.Blue-green deployment is an important technique to minimise/reduce the service downtime when deploying codebase changes to production
    by running two identical production environments called Blue and Green.
  2.With this technique, a software will be deployed to two different production environments with identical configurations
    called blue and green
  3.lets assume the active environment is blue and the idle environment is green.   
  4.At any time, only one of them will be alive and serving requests in production while the other is idle and used as failover.
  4.when you whish to release new version of the software,you can deploy it to the idle green environment first. once the software
    is ensured to be working properly in green, you can switch your routing to point to green instead of blue.
    This act of host-swapping environments after deployment can cause much shorter downtime as compared to simply deploying new version
    to a shared single environment
 



realtime issues:
Q. Who hasn't had issues when deploying a software change to production? No one right?
I once accidentally deleted a bin folder from a .NET application in one of four servers when deploying a change. The site was working 
not continuously or steadily, as a consequence, so I had to check all the servers again to find the one that was having problems. Luckily
for me, there were only four servers.

1.ways to smoothly deploy to production without risking quality
    write a script to do deployments, Then I test the script locally and in the development environment. That way, next time I want to
    deploy a change, I won't have to worry about missing any steps like creating a folder or giving permissions to some files. I'll just
    need to run the script again.
    New tools has emerged like Terraform, Ansible, and Jenkins
2.Build and Pack Your Application Only Once 




Q.what is horizental scaling and vertical scaling?
A.Horizontal scaling means that you scale by adding more machines(like autoscaling) into your pool of resources whereas 
  Vertical scaling means that you scale by adding more power (CPU, RAM) to an existing machine.

