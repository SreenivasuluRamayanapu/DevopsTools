Git is a version control system for tracking changes in files and coordinating work on those files, among multiple people.

Git branching strategy:
-----------------------
master   - production code branch
release1 - creating release branch from the master branch(production code)
feature1 - each developer creates a feature branch from release branch, and develop the new features in that branch
hotfix   - 

Let's say you are working on feature branch and you have to pull the latest changes form release branch. make sure any changes that were
moved to the release branch are available in the local feature branch.This avoids the conflicts/duplicatecode while merging the feature
branch to the release branch at feature completion time.
Note:Everyone should take the latest updates from the release branch daily using the merge or rebase Git commands.
git checkout -b feature1
git merge release1

On completion of a feature, raise a pull request to merge the code to the release branch. This step can be done in the GitHub UI.

A code review will be performed on the pull request and changes will be done if needed. If everything is fine, the pull request will be
approved by the reviewer.


Create a tag from the release branch to the testing team for validation of the feature. We have to provide a tag to the testing team
upon completion related features to be tested   
git tag -a release1_tag1 -m "release1 tag1"

Upon completion of all features planned in the release, the final tag can be provided to the testing team for validation.Once testing is
complete, a software production release will be done from the final QA approved tag.

After the production release, merge the release branch code to the master so that the master has the production code.

Next, delete the feature branch upon completion of the feature and delete the release branch upon completion of the release.
git branch -d feature1
git branch -d release1

Any post-production release fix can be done in a tag. Remember to move the code to the master and post any production fix release.
git checkout -b  release1_prodfixticketNumber release_tag1 (Hotfix branch)
This command creates a new branch, “release1_prodfixticketNumber,” from the production release tag “release1_tag1.

Create the next release branch from the master, as the master has the production code, and follow the same approach for development
as described above.

In this approach, the master branch has the production code and releases are done from a tag. Each dev member can cut a branch from the
release branch, work on a feature independently, and upon completion of the feature, can raise a merge pull request and get it approved.
While doing development, each dev member should rebase the code from the release branch so that they have the latest code.


This approach works fine for projects where a team is working on a single release at a time. Most teams are working on multiple releases
at a time, so they have to maintain more than one release branch active at a time

1. clone the files
2. if you wan tot do any modifications, it is always recommend to create a branch  then do it



Q. what is the difference between HEAD, working tree and index in Git?


Q. when should i use git stash?

Q.


Q.how to revert previous commit in git?
Q.how to remove a file from git without removing it from your file system?



Q.how do you use git rebase instead of git merge?


Q.


