Git is a version control system for tracking changes in files and coordinating work on those files, among multiple people.

Git branching strategy:
-----------------------
master   - production code branch / master only contains released code
release  - creating release branch from the master branch(production code)/Development on develop branch.
feature  - each developer creates a feature branch from release branch, and develop the new features in that branch
hotfix   - creating hotfix branch from the master branch

step1: creating release branch from the master branch
release branch is the branch to which all feature branches are merged and where all tests are performed. Only when everything’s been
thoroughly checked and fixed it can be merged to the master.

step2: creating feature branch from the release branch
make sure any changes that were moved to the release branch are available in the local feature branch.This avoids the conflicts
or duplicate code while merging the feature branch to the release branch at feature completion time.
note: should take the latest updates from the release branch daily using the merge or rebase Git commands.
git checkout -b feature1
git merge release1

step2:
After completion of feature, raise a pull request to merge the code to the release branch.This step can be done in the GitHub UI.
A code review will be performed on the pull request and changes will be done if needed. If everything is fine, the pull request 
will be approved by the reviewer.

step3:
Create a tag from the release branch to the testing team for validation of the feature. 
git tag -a release1_tag1 -m "release1 tag1"
Once testing is complete, a software production release will be done from the final QA approved tag.

step4:
After the production release, merge the release branch code to the master so that the master has the production code.
Next, delete the feature branch upon completion of the feature and delete the release branch upon completion of the release.
git branch -d feature1
git branch -d release1

step5:
Maintenance or hotfix branches are used to quickly patch production releases. Any post-production release fix can be done in a tag.
created from the master branch.
git checkout -b  release1_prodfixticketNumber release_tag1 (Hotfix branch)
This command creates a new branch, “release1_prodfixticketNumber,” from the production release tag “release1_tag1

Create the next release branch from the master, as the master has the production code, and follow the same approach for development
as described above

summary:
In this approach, the master branch has the production code and releases are done from a tag. Each dev member can cut a branch from the
release branch, work on a feature independently, and upon completion of the feature, can raise a merge pull request and get it approved.
While doing development, each dev member should rebase the code from the release branch so that they have the latest code.

This approach works fine for projects where a team is working on a single release at a time. Most teams are working on multiple releases
at a time, so they have to maintain more than one release branch active at a time.

picture:
https://dzone.com/articles/git-strategies-for-software-development











1. clone the files
2. if you wan tot do any modifications, it is always recommend to create a branch  then do it



Q. what is the difference between HEAD, working tree and index in Git?


Q.when should i use git stash?
Git's Stash feature is used to save your local changes temporarily.  we can get back the changes where we left
git stash
git stash list
git stash apply
git stash pop
Q.


Q.how to revert previous commit in git?
Q.how to remove a file from git without removing it from your file system?
Suppose we have six commits, if you want to get back to 3th commit and we dont want to keep 4th,5th and 6th commits these are bad commits,
that time we use Git reset.
Git reset --mixed commitId
Git reset --hard  commitId
Git reset --soft  commitId

Suppose we have six commits, if you want to get back to 3th commit and we dont want to delete 4th,5th and 6th commits, that time we use Git revert
it will create extra 'revert commit' instead of deleting the commits.
Git revert commitId



Q.how do you use git rebase instead of git merge?


Q.What is the difference between "git pull" and "git fetch"?
Git pull is used to download the latest changes from the remote repository which is not in our local copy and merge it target branch
of our local repository automatically.
git pull origin master

Merge is used to integrate changes from one branch to another branch. For suppose we have a two branches called master and feature,
we have to integrate the changes from release branch i to master branch, first we have to checkout from release branch to master branch
and then merge the changes
git checkout master
git merge release
