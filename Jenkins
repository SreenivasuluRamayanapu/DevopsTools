Jenkins is a continuous integration tool. 
Jenkins is a build automation server as well we can do deployment automation also.

Developers do the changes and checkin their code to source code repository like Git, Jenkins server pull the code under workspace in 
Jenkins home directory, then it compile the code and run the test cases then it perform source code quality check, if everything goes well 
it creates package. If something goes wrong send email notifications to the developers, so that they can fix the isssue again they push to
Git, this is how freequently integrate the code.

Once package is creted, automatically deploy it into the test servers for User Acceptance Test, then Finally, the application is manually
deployed on the production servers for release by taking an aprroval. So continuous dlivery is also a automated process except deploying
the application in to production based on approval.

continuous deployment is completely automated process right from developers check in their source code to Git to till deployment into
the production.
continuous deployment is risky if anything goes wrong in production it becomes messy.

Advantage of contnuous integration
1. immeadiate feedback to the developers about build result
2. detecting and fixing the bugs easier
3. it improves the productivity
4. it improves the code quality by minimizing the defects


Consider the 'Jenkins home directory' as a database. Itâ€™s very important to take care of it. This folder handles from simple
configurations upto your entire automation jobs.
/var/lib/jenkins

how to increase Jenkins Heap space?




how you do build automation? how you trigger the build, is it CI or it is manual(click on build now)?
by using cron expression for every 6 hours 



CI/CD Pipeline in Jenkins
1.chaining the jobs or upstream and downstream jobs
2.jenkins pipeline script


deploying War file from build server to a docker container(tomcat) using Ansible
Developers checkin their changes to Git, Jenkins pulls the code then build it, whatever build artifacts has generated give it
to the Ansible, ansible is going to deploy it into the tomcat server.
implementation:
1.Jenkins server/build server
2.Ansible server
3.Tomcat Server
step1:
Publish over ssh plugin - Send files(SCP) over SSH to a remote server i.e Ansible server
                          and Execute commands on a remote server
                          Manage Jenkins - Configure System - publish over ssh - ssh servers
                          Hostname: Ansible serverIP
                          username: ansadm
                          password: ******
step2:
Establish ssh connection(password less authentication) b/n Ansible server and Tomcat server. create a playbook copywarfile.yml
under /opt/playbooks location in Ansible server
# copywarfile.yml
  ---
  - hosts: all 
    become: true
    tasks: 
     - name: copy jar/war onto tomcat servers
        copy:
          src: /op/playbooks/wabapp/target/webapp.war
          dest: /opt/apache-tomcat-8.5.32/webapps
          
step3:
In Jenkins server, Go to post build actions - send files or execute commands over SSH
ssh server Name  - target machine(ansible serverIP)
source file      - war file location  i.e Webapplication/target/*.war
Remote directory - //opt//playbooks (where do you want to copy on target machine)
Again, Go to post build actions - send files or execute commands over SSH
ssh server Name  - target machine(ansible serverIP)
Execute command  - ansible-playbook /opt/playbooks/copywarfile.yml  (we are going to execute this command on ansible server)  
Execute job and you should be able to seen build has been deployed on Tomcat server.




